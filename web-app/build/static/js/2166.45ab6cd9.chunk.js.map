{"version":3,"file":"static/js/2166.45ab6cd9.chunk.js","mappings":"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","sources":["screens/Console/Tools/Inspect.tsx","screens/Console/Tools/KeyRevealer.tsx","screens/Console/Common/DistributedOnly/DistributedOnly.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  Box,\n  breakPoints,\n  Button,\n  FormLayout,\n  HelpBox,\n  InputBox,\n  InspectMenuIcon,\n  PageLayout,\n  PasswordKeyIcon,\n  Switch,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport {\n  deleteCookie,\n  getCookieValue,\n  performDownload,\n} from \"../../../common/utils\";\nimport {\n  selDistSet,\n  setErrorSnackMessage,\n  setHelpName,\n} from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport DistributedOnly from \"../Common/DistributedOnly/DistributedOnly\";\nimport KeyRevealer from \"./KeyRevealer\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport HelpMenu from \"../HelpMenu\";\n\nconst ExampleBlock = ({\n  volumeVal,\n  pathVal,\n}: {\n  volumeVal: string;\n  pathVal: string;\n}) => {\n  return (\n    <Box className=\"code-block-container\">\n      <Box className=\"example-code-block\">\n        <Box\n          sx={{\n            display: \"flex\",\n            marginBottom: \"5px\",\n            flexFlow: \"row\",\n            [`@media (max-width: ${breakPoints.sm}px)`]: {\n              flexFlow: \"column\",\n            },\n          }}\n        >\n          <label>Volume/bucket Name :</label> <code>{volumeVal}</code>\n        </Box>\n        <Box\n          sx={{\n            display: \"flex\",\n            flexFlow: \"row\",\n            [`@media (max-width: ${breakPoints.sm}px)`]: {\n              flexFlow: \"column\",\n            },\n          }}\n        >\n          <label>Path : </label>\n          <code>{pathVal}</code>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nconst Inspect = () => {\n  const dispatch = useAppDispatch();\n  const distributedSetup = useSelector(selDistSet);\n\n  const [volumeName, setVolumeName] = useState<string>(\"\");\n  const [inspectPath, setInspectPath] = useState<string>(\"\");\n  const [isEncrypt, setIsEncrypt] = useState<boolean>(true);\n\n  const [decryptionKey, setDecryptionKey] = useState<string>(\"\");\n\n  const [insFileName, setInsFileName] = useState<string>(\"\");\n\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n  const [volumeError, setVolumeError] = useState<string>(\"\");\n  const [pathError, setPathError] = useState<string>(\"\");\n  /**\n   * Validation Effect\n   */\n  useEffect(() => {\n    let isVolValid;\n    let isPathValid;\n\n    isVolValid = volumeName.trim().length > 0;\n    if (!isVolValid) {\n      setVolumeError(\"This field is required\");\n    } else if (volumeName.slice(0, 1) === \"/\") {\n      isVolValid = false;\n      setVolumeError(\"Volume/Bucket name cannot start with /\");\n    }\n    isPathValid = inspectPath.trim().length > 0;\n    if (!inspectPath) {\n      setPathError(\"This field is required\");\n    } else if (inspectPath.slice(0, 1) === \"/\") {\n      isPathValid = false;\n      setPathError(\"Path cannot start with /\");\n    }\n    const isValid = isVolValid && isPathValid;\n\n    if (isVolValid) {\n      setVolumeError(\"\");\n    }\n    if (isPathValid) {\n      setPathError(\"\");\n    }\n\n    setIsFormValid(isValid);\n  }, [volumeName, inspectPath]);\n\n  const makeRequest = async (url: string) => {\n    return await fetch(url, { method: \"GET\" });\n  };\n\n  const performInspect = async () => {\n    let basename = document.baseURI.replace(window.location.origin, \"\");\n    const urlOfInspectApi = `${basename}api/v1/admin/inspect?volume=${encodeURIComponent(volumeName)}&file=${encodeURIComponent(inspectPath)}&encrypt=${isEncrypt}`;\n\n    makeRequest(urlOfInspectApi)\n      .then(async (res) => {\n        if (!res.ok) {\n          const resErr: any = await res.json();\n\n          dispatch(\n            setErrorSnackMessage({\n              errorMessage: resErr.message,\n              detailedError: resErr.code,\n            }),\n          );\n        }\n        const blob: Blob = await res.blob();\n\n        //@ts-ignore\n        const filename = res.headers.get(\"content-disposition\").split('\"')[1];\n        const decryptKey = getCookieValue(filename) || \"\";\n\n        performDownload(blob, filename);\n        setInsFileName(filename);\n        setDecryptionKey(decryptKey);\n      })\n      .catch((err) => {\n        dispatch(setErrorSnackMessage(err));\n      });\n  };\n\n  const resetForm = () => {\n    setVolumeName(\"\");\n    setInspectPath(\"\");\n    setIsEncrypt(true);\n  };\n\n  const onCloseDecKeyModal = () => {\n    deleteCookie(insFileName);\n    setDecryptionKey(\"\");\n    resetForm();\n  };\n\n  useEffect(() => {\n    dispatch(setHelpName(\"inspect\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeaderWrapper label={\"Inspect\"} actions={<HelpMenu />} />\n\n      <PageLayout>\n        {!distributedSetup ? (\n          <DistributedOnly\n            iconComponent={<InspectMenuIcon />}\n            entity={\"Inspect\"}\n          />\n        ) : (\n          <FormLayout\n            helpBox={\n              <HelpBox\n                title={\"Learn more about the Inspect feature\"}\n                iconComponent={<InspectMenuIcon />}\n                help={\n                  <Fragment>\n                    <Box\n                      sx={{\n                        marginTop: \"16px\",\n                        fontWeight: 600,\n                        fontStyle: \"italic\",\n                        fontSize: \"14px\",\n                      }}\n                    >\n                      Examples:\n                    </Box>\n\n                    <Box\n                      sx={{\n                        display: \"flex\",\n                        flexFlow: \"column\",\n                        fontSize: \"14px\",\n                        flex: \"2\",\n\n                        \"& .step-row\": {\n                          fontSize: \"14px\",\n                          display: \"flex\",\n                          marginTop: \"15px\",\n                          marginBottom: \"15px\",\n\n                          \"&.step-text\": {\n                            fontWeight: 400,\n                          },\n                          \"&:before\": {\n                            content: \"' '\",\n                            height: \"7px\",\n                            width: \"7px\",\n                            backgroundColor: \"#2781B0\",\n                            marginRight: \"10px\",\n                            marginTop: \"7px\",\n                            flexShrink: 0,\n                          },\n                        },\n\n                        \"& .code-block-container\": {\n                          flex: \"1\",\n                          marginTop: \"15px\",\n                          marginLeft: \"35px\",\n\n                          \"& input\": {\n                            color: \"#737373\",\n                          },\n                        },\n\n                        \"& .example-code-block label\": {\n                          display: \"inline-block\",\n                          width: 160,\n                          fontWeight: 600,\n                          fontSize: 14,\n                          [`@media (max-width: ${breakPoints.sm}px)`]: {\n                            width: \"100%\",\n                          },\n                        },\n\n                        \"& code\": {\n                          width: 100,\n                          paddingLeft: \"10px\",\n                          fontFamily: \"monospace\",\n                          paddingRight: \"10px\",\n                          paddingTop: \"3px\",\n                          paddingBottom: \"3px\",\n                          borderRadius: \"2px\",\n                          border: \"1px solid #eaeaea\",\n                          fontSize: \"10px\",\n                          fontWeight: 500,\n                          [`@media (max-width: ${breakPoints.sm}px)`]: {\n                            width: \"100%\",\n                          },\n                        },\n                        \"& .spacer\": {\n                          marginBottom: \"5px\",\n                        },\n                      }}\n                    >\n                      <Box>\n                        <Box className=\"step-row\">\n                          <div className=\"step-text\">\n                            To Download 'xl.meta' for a specific object from all\n                            the drives in a zip file:\n                          </div>\n                        </Box>\n\n                        <ExampleBlock\n                          pathVal={`test*/xl.meta`}\n                          volumeVal={`test-bucket`}\n                        />\n                      </Box>\n\n                      <Box>\n                        <Box className=\"step-row\">\n                          <div className=\"step-text\">\n                            To Download all constituent parts for a specific\n                            object, and optionally encrypt the downloaded zip:\n                          </div>\n                        </Box>\n\n                        <ExampleBlock\n                          pathVal={`test*/xl.meta`}\n                          volumeVal={`test*/*/part.*`}\n                        />\n                      </Box>\n                      <Box>\n                        <Box className=\"step-row\">\n                          <div className=\"step-text\">\n                            To Download recursively all objects at a prefix.\n                            <br />\n                            NOTE: This can be an expensive operation use it with\n                            caution.\n                          </div>\n                        </Box>\n                        <ExampleBlock\n                          pathVal={`test*/xl.meta`}\n                          volumeVal={`test/**`}\n                        />\n                      </Box>\n                    </Box>\n\n                    <Box\n                      sx={{\n                        marginTop: \"30px\",\n                        marginLeft: \"15px\",\n                        fontSize: \"14px\",\n                      }}\n                    >\n                      You can learn more at our{\" \"}\n                      <a\n                        href=\"https://github.com/minio/minio/tree/master/docs/debugging?ref=con\"\n                        target=\"_blank\"\n                        rel=\"noopener\"\n                      >\n                        documentation\n                      </a>\n                      .\n                    </Box>\n                  </Fragment>\n                }\n              />\n            }\n          >\n            <form\n              noValidate\n              autoComplete=\"off\"\n              onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n                e.preventDefault();\n                performInspect();\n              }}\n            >\n              <InputBox\n                id=\"inspect_volume\"\n                name=\"inspect_volume\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setVolumeName(e.target.value);\n                }}\n                label=\"Volume or Bucket Name\"\n                value={volumeName}\n                error={volumeError}\n                required\n                placeholder={\"test-bucket\"}\n              />\n              <InputBox\n                id=\"inspect_path\"\n                name=\"inspect_path\"\n                error={pathError}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setInspectPath(e.target.value);\n                }}\n                label=\"File or Path to inspect\"\n                value={inspectPath}\n                required\n                placeholder={\"test*/xl.meta\"}\n              />\n              <Switch\n                label=\"Encrypt\"\n                indicatorLabels={[\"True\", \"False\"]}\n                checked={isEncrypt}\n                value={\"true\"}\n                id=\"inspect_encrypt\"\n                name=\"inspect_encrypt\"\n                onChange={() => {\n                  setIsEncrypt(!isEncrypt);\n                }}\n              />\n              <Box\n                sx={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"flex-end\",\n                  marginTop: \"55px\",\n                }}\n              >\n                <Button\n                  id={\"inspect-clear-button\"}\n                  style={{\n                    marginRight: \"15px\",\n                  }}\n                  type=\"button\"\n                  variant=\"regular\"\n                  data-test-id=\"inspect-clear-button\"\n                  onClick={resetForm}\n                  label={\"Clear\"}\n                />\n                <Button\n                  id={\"inspect-start\"}\n                  type=\"submit\"\n                  variant={\"callAction\"}\n                  data-test-id=\"inspect-submit-button\"\n                  disabled={!isFormValid}\n                  label={\"Inspect\"}\n                />\n              </Box>\n            </form>\n          </FormLayout>\n        )}\n        {decryptionKey ? (\n          <ModalWrapper\n            modalOpen={true}\n            title=\"Inspect Decryption Key\"\n            onClose={onCloseDecKeyModal}\n            titleIcon={<PasswordKeyIcon />}\n          >\n            <Fragment>\n              <Box>\n                This will be displayed only once. It cannot be recovered.\n                <br />\n                Use secure medium to share this key.\n              </Box>\n              <form\n                noValidate\n                onSubmit={() => {\n                  return false;\n                }}\n              >\n                <KeyRevealer value={decryptionKey} />\n              </form>\n            </Fragment>\n          </ModalWrapper>\n        ) : null}\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default Inspect;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport { Button, CopyIcon, InputBox, Box, breakPoints } from \"mds\";\n\nconst KeyRevealer = ({ value }: { value: string }) => {\n  const [shown, setShown] = useState<boolean>(false);\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        alignItems: \"center\",\n        flexFlow: \"row\",\n        [`@media (max-width: ${breakPoints.sm}px)`]: {\n          flexFlow: \"column\",\n        },\n      }}\n    >\n      <InputBox\n        id=\"inspect-dec-key\"\n        name=\"inspect-dec-key\"\n        placeholder=\"\"\n        label=\"\"\n        type={shown ? \"text\" : \"password\"}\n        onChange={() => {}}\n        value={value}\n        overlayIcon={<CopyIcon />}\n        readOnly={true}\n        overlayAction={() => navigator.clipboard.writeText(value)}\n      />\n\n      <Button\n        id={\"show-hide-key\"}\n        style={{\n          marginLeft: \"10px\",\n        }}\n        variant=\"callAction\"\n        onClick={() => setShown(!shown)}\n        label={\"Show/Hide\"}\n      />\n    </Box>\n  );\n};\n\nexport default KeyRevealer;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { HelpBox, Box, Grid, breakPoints } from \"mds\";\n\ninterface IDistributedOnly {\n  iconComponent: any;\n  entity: string;\n}\n\nconst DistributedOnly = ({ iconComponent, entity }: IDistributedOnly) => {\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <HelpBox\n          title={`${entity} not available`}\n          iconComponent={iconComponent}\n          help={\n            <Box\n              sx={{\n                fontSize: \"14px\",\n                [`@media (max-width: ${breakPoints.sm}px)`]: {\n                  display: \"flex\",\n                  flexFlow: \"column\",\n                },\n              }}\n            >\n              <span>\n                This feature is not available for a single-disk setup.&nbsp;\n              </span>\n              <span>\n                Please deploy a server in{\" \"}\n                <a\n                  href=\"https://min.io/docs/minio/linux/operations/install-deploy-manage/deploy-minio-multi-node-multi-drive.html?ref=con\"\n                  target=\"_blank\"\n                  rel=\"noopener\"\n                >\n                  Distributed Mode\n                </a>{\" \"}\n                to use this feature.\n              </span>\n            </Box>\n          }\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default DistributedOnly;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalBox, Snackbar } from \"mds\";\nimport { CSSObject } from \"styled-components\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  titleIcon?: React.ReactNode;\n  iconColor?: \"default\" | \"delete\" | \"accept\";\n  sx?: CSSObject;\n}\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  wideLimit = true,\n  titleIcon = null,\n  iconColor = \"default\",\n  sx,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar,\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (message === \"\" || (message && message.length < 5)) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <ModalBox\n      onClose={onClose}\n      open={modalOpen}\n      title={title}\n      titleIcon={titleIcon}\n      widthLimit={wideLimit}\n      sx={sx}\n      iconColor={iconColor}\n    >\n      <MainError isModal={true} />\n      <Snackbar\n        onClose={closeSnackBar}\n        open={openSnackbar}\n        message={message}\n        mode={\"inline\"}\n        variant={modalSnackMessage.type === \"error\" ? \"error\" : \"default\"}\n        autoHideDuration={modalSnackMessage.type === \"error\" ? 10 : 5}\n        condensed\n      />\n      {children}\n    </ModalBox>\n  );\n};\n\nexport default ModalWrapper;\n"],"names":["ExampleBlock","_ref","volumeVal","pathVal","_jsx","Box","className","children","_jsxs","sx","display","marginBottom","flexFlow","concat","breakPoints","sm","Inspect","dispatch","useAppDispatch","distributedSetup","useSelector","selDistSet","volumeName","setVolumeName","useState","inspectPath","setInspectPath","isEncrypt","setIsEncrypt","decryptionKey","setDecryptionKey","insFileName","setInsFileName","isFormValid","setIsFormValid","volumeError","setVolumeError","pathError","setPathError","useEffect","isVolValid","isPathValid","trim","length","slice","isValid","performInspect","async","basename","document","baseURI","replace","window","location","origin","fetch","url","method","makeRequest","encodeURIComponent","then","res","ok","resErr","json","setErrorSnackMessage","errorMessage","message","detailedError","code","blob","filename","headers","get","split","decryptKey","getCookieValue","performDownload","catch","err","resetForm","setHelpName","Fragment","PageHeaderWrapper","label","actions","HelpMenu","PageLayout","FormLayout","helpBox","HelpBox","title","iconComponent","InspectMenuIcon","help","marginTop","fontWeight","fontStyle","fontSize","flex","content","height","width","backgroundColor","marginRight","flexShrink","marginLeft","color","paddingLeft","fontFamily","paddingRight","paddingTop","paddingBottom","borderRadius","border","href","target","rel","noValidate","autoComplete","onSubmit","e","preventDefault","InputBox","id","name","onChange","value","error","required","placeholder","Switch","indicatorLabels","checked","alignItems","justifyContent","Button","style","type","variant","onClick","disabled","DistributedOnly","entity","ModalWrapper","modalOpen","onClose","onCloseDecKeyModal","deleteCookie","titleIcon","PasswordKeyIcon","KeyRevealer","shown","setShown","overlayIcon","CopyIcon","readOnly","overlayAction","navigator","clipboard","writeText","Grid","container","item","xs","wideLimit","iconColor","openSnackbar","setOpenSnackbar","modalSnackMessage","state","system","modalSnackBar","setModalSnackMessage","detailedErrorMsg","ModalBox","open","widthLimit","MainError","isModal","Snackbar","closeSnackBar","mode","autoHideDuration","condensed"],"sourceRoot":""}